@using BoardBrawl.WebApp.MVC.Areas.Game.Models;
@model PlayerBoard

<div class="col-4 h-100">
    @await Html.PartialAsync("_PlayerList", Model)
</div>
<div class="col h-100">
    <video id="focusedPlayerVideo" style="width:100%;" muted></video>
</div>


<script>
    var _localVideoStream;

    $(document).ready(function () {
        InitializeLocalVideoStream();
        SetFocusedVideo();

        $(document).off('click', '.playerListPlayer');
        $(document).on('click', '.playerListPlayer', function () {
            OnPlayerListPlayerClicked(this);
        });
    });

    function PlayerBoard_RefreshPlayerInfo(userId)
    {
        $.ajax({
            url: '/Game/Home/PlayerInfo',
            data: {
                gameId: '@(Model.GameId)',
                userId: userId
            },
            success: function (html) {
                var playerInfoElement = $('.playerInfo[data-userid="' + userId + '"]:first');
                playerInfoElement.html(html);
            }
        });
    }

    function InitializeLocalVideoStream() 
    {
        var videoElement = $(".localVideo")[0];

        navigator.mediaDevices.getUserMedia({
            audio: true,
            video: true
        }).then(stream => {
            _localVideoStream = stream;

            videoElement.srcObject = stream;
            $(videoElement).on('loadedmetadata', function() {
                videoElement.play();
            });
        })
        .catch(error => {
            videoElement.style.display = "none";
            var errorImageElement = $('.errorImage[data-userid="@Model.UserId"]')[0];
            errorImageElement.style.display = "block";
        });
    }

    function SetFocusedVideo() {
        var focusedVideoElement = $(".focusedPlayer")[0];
        var focusedPlayerVideo = $('#focusedPlayerVideo')[0];

        if (focusedPlayerVideo.readyState >= focusedPlayerVideo.HAVE_CURRENT_DATA) 
        {
            focusedPlayerVideo.srcObject = focusedVideoElement.srcObject;
            focusedPlayerVideo.play();
        }
        else
        {
            focusedVideoElement.addEventListener('loadedmetadata', function () 
                {
                    focusedPlayerVideo.srcObject = focusedVideoElement.srcObject;
                    focusedPlayerVideo.play();
                });
        }
    }


    function PlayerBoard_LoadRemoteStreams(peer) 
    {
        $(".remoteVideo").each(function () {
            var peerId = $(this).attr("data-peerid");
            
            var call = peer.call(peerId, _localVideoStream);

            if(!call){
                var videoElement = $('.playerVideo[data-peerid="' + peerId + '"]')[0];
                videoElement.style.display = "none";

                var errorImageElement = $('.errorImage[data-peerid="' + peerId +'"]')[0];
                errorImageElement.style.display = "block";
            }
            else{
                call.on("stream", (stream) => {
                    this.srcObject = stream;
                    this.addEventListener('loadedmetadata', () => {
                        this.play();
                    });
                });

                call.on("error", (err) => {
                    console.log("Call error:" + err);
                });

                call.on('close', () => {
                    Endcall(call);
                })
            }
        });
    }

    function EndCall(call) {
        call.close();
    }

    function OnPlayerListPlayerClicked(playerListPlayer) {
        var videoElement = $(playerListPlayer).find('.playerVideo')[0];

        var stream = videoElement.srcObject;
        var focusedPlayerVideo = $('#focusedPlayerVideo')[0];

        //Set the focused player style on the clicked player
        $('.playerListPlayer').not(videoElement).removeClass('focusedPlayer');
        $(playerListPlayer).addClass('focusedPlayer');

        focusedPlayerVideo.srcObject = stream;
        focusedPlayerVideo.play();
    }

</script>