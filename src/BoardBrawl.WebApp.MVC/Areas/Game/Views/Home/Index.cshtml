@using BoardBrawl.WebApp.MVC.Areas.Game.Models;
@model Model;

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>
<script src="~/js/game/playermanager.js"></script>

@{
    ViewData["Title"] = Model.GameName;
}
<style>
    ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    ::-webkit-scrollbar-track {
        -webkit-box-shadow: inset 0 0 6px rgba(120,120,120,0.3);
        border-radius: 3px;
    }

    ::-webkit-scrollbar-thumb {
        border-radius: 3px;
        -webkit-box-shadow: inset 0 0 3px gold;
    }

    .card-tooltip-image {
        width: 250px;
    }

    .tooltip-inner {
        max-width: 100% !important;
    }

    .no-arrow::after {
        display: none !important;
    }

    .btn-group-xs > .btn, .btn-xs {
        padding: .25rem .4rem;
        font-size: .875rem;
        line-height: .5;
        border-radius: .2rem;
    }

    .btn-hover-danger:hover {
        border-color: #a52834 !important;
        background-color: #b02a37 !important;
    }

    .btn-hover-warning:hover {
        background-color: #ffcd39 !important;
        border-color: #ffc720 !important;
    }

    .text-md {
        font-size: .8rem;
    }

    .text-sm {
        font-size: .7rem;
    }

    .text-xs {
        font-size: .6rem;
    }

    .overlay-top {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 1;
        background-color: rgba(33, 37, 41, 0.5)
    }
</style>

<div class="row bg-dark" style="height:100%;" id="main">
    <div class="col-1 h-100" style="overflow-y:auto; overflow-x:clip; min-width: 94px; max-width: 94px;">
        @await Html.PartialAsync("_CommandBar")
    </div>

    <div class="col h-100">
        <div id="playerBoardContainer" class="row h-100 border border-primary">
            @await Html.PartialAsync("_PlayerBoard", Model.PlayerBoard)
        </div>
    </div>

    <div class="col-2 h-100 gamePanel" style="overflow-y:auto; overflow-x:clip;">
        @await Html.PartialAsync("_GamePanel")
    </div>
</div>

@section Scripts
{
    <script>
        //Fields
        var _localVideoStream;
        var _gameHubConnection;
        var _playerManager;

        //Initialization
        $(document).ready(async function () 
        {
            InitializeGameHub();
            InitializeCardSearch();
            InitializeUiEventHandlers();
            InitializeTooltips();
            InitializePlayerInfoDropdowns();
            InitializePlayerTurnOrderDialog();

            try
            {
                await InitializeLocalVideoStream();
            }
            catch (error) 
            {
                console.warn('Error loading local video stream:', error);
            }

            InitializePlayerManager();

            await _playerManager.InitializePeerJs();
            await JoinGameHub();
            await LoadRemoteStreams();

            InitializeFocusedPlayer();
        });

        $(document).ajaxComplete(function () {
            //Re-initialize tooltips after any part of the board is reloaded
            InitializeTooltips();
        });

        //Game hub events
        function OnPlayerJoined(playerId, peerId) {
            console.log(`Index OnPlayerJoined: playerId ${playerId}`);
            if(playerId != '@Model.PlayerId')
            {
                RefreshPlayersList();
            }
        }

        function OnPassTurn(activePlayerId) 
        {
            var activePlayerListPlayer = $('.playerListPlayer[data-player-id=' + activePlayerId + ']');
            $('.playerListPlayer').not(activePlayerListPlayer).removeClass('activePlayer');
            $(activePlayerListPlayer).addClass('activePlayer');
        }

        function OnPlayerLifeTotalChanged(playerId, newLifeTotal)
        {
            $('.lifeTotal[data-player-id=' + playerId + ']').text(newLifeTotal);
        }

        function OnCommanderChanged(playerId)
        {
            if(playerId != @Model.PlayerId)
            {
                $.ajax({
                    url: '/Game/Home/GetCommanders',
                    data: {
                        gameId: '@(Model.GameId)',
                        playerId: playerId
                    },
                    success: function (result) {
                        RefreshCommanders(result, playerId);
                    }
                });
            }
        }

        function OnCommanderDamageChanged(playerId, ownerPlayerId, cardId, amount)
        {
            if(playerId != @Model.PlayerId){
                UpdateCommanderDamage(playerId, ownerPlayerId, cardId, amount);
            }
        }

        function OnPlayerInfectCountChanged(playerId, amount) {
            if (playerId != @Model.PlayerId) {
                UpdateInfectCount(playerId, amount);
            }
        }

        function OnGameOwnerChanged(redirectUrl)
        {
            window.location.href = redirectUrl;
        }

        function OnPlayerDisconnected(playerId)
        {
            RemovePlayer(playerId);
        }

        //Initialization Methods
        function InitializeGameHub() 
        {
            _gameHubConnection = new signalR.HubConnectionBuilder()
                .withUrl("/GameHub").build();

            _gameHubConnection.on("OnPlayerJoined", function (playerId, peerId) {
                OnPlayerJoined(playerId, peerId);
            });

            _gameHubConnection.on("OnPlayerLifeTotalChanged", function (playerId, newLifeTotal) {
                OnPlayerLifeTotalChanged(playerId, newLifeTotal);
            });

            _gameHubConnection.on("OnCommanderChanged", function (playerId) {
                OnCommanderChanged(playerId);
            });

            _gameHubConnection.on("OnPassTurn", function (activePlayerId) {
                OnPassTurn(activePlayerId);
            });

            _gameHubConnection.on("OnGameOwnerChanged", function (redirectUrl) {
                OnGameOwnerChanged(redirectUrl);
            });

            _gameHubConnection.on("OnCommanderDamageChanged", function (playerId, ownerPlayerId, cardId, amount) {
                OnCommanderDamageChanged(playerId, ownerPlayerId, cardId, amount);
            });

            _gameHubConnection.on("OnPlayerInfectCountChanged", function (playerId, amount) {
                OnPlayerInfectCountChanged(playerId, amount);
            });

            _gameHubConnection.on("OnPlayerDisconnected", function (playerId) {
                OnPlayerDisconnected(playerId);
            });
        }

        function InitializePlayerManager()
        {
            _playerManager = new PlayerManager(_localVideoStream, OnPlayerStreamStarted, OnPlayerStreamEnded);
        }

        function InitializeFocusedPlayer() 
        {
            var focusedPlayerThumbnail = $('.focusedPlayer');

            if (focusedPlayerThumbnail) {
                focusedPlayerThumbnail.find('.playerThumbnail').trigger('click');
            }
        }

        async function InitializeLocalVideoStream() {
            var videoElement = $(".localVideo")[0];

            _localVideoStream = await navigator.mediaDevices.getUserMedia({
                audio: true,
                video: true
            });

            videoElement.srcObject = _localVideoStream;
            await videoElement.play();
            HideErrorThumbnail(@Model.PlayerId);
        }

        async function JoinGameHub() {
            await _gameHubConnection.start();
            await _gameHubConnection.invoke("JoinGameHub", '@Model.GameId', '@Model.PlayerId', _playerManager.GetPeerId());
        }

        function InitializeUiEventHandlers()
        {
            $(document).on('click', '#btnPassTurn', btnPassTurn_Click);

            $(document).on('click', '.btnAdjustLifeTotal', btnAdjustLifeTotal_Click);

            $(document).on("click", '.btnAdjustInfectCount', btnAdjustInfectCount_Click);

            $(document).on('click', '.btnAdjustCommanderDamage', btnAdjustCommanderDamage_Click);

            $(document).on('click', '.btnPromoteToGameOwner', btnPromoteToGameOwner_Click);

            $(document).on('click', '.playerThumbnail', playerThumbnail_Click);

            $('body').on('change', '.commander-id', commanderId_Changed);

            $('body').on('change', '.card-search-id', cardSearchId_Changed);

            $(document).on('click', '.btnRemoveCard', btnRemoveCard_Click);
        }

        function InitializeTooltips()
        {
            //Tooltips for card images
            $('.card-tooltip').tooltip({
                animated: 'fade',
                placement: 'auto',
                html: true
            });

            //All other tooltips
            $('[data-bs-toggle="tooltip"]').each(function () {
                $(this).tooltip();
            });
        }

        function InitializePlayerInfoDropdowns()
        {
            //Make sure the player info drop down can extend outside of the parent container
            $(document).on('show.bs.dropdown', '.playerInfoDropdown', function () {
                var dropdown = $(this).closest('.dropdown');
                var dropdownMenu = dropdown.find('.dropdown-menu').first();

                if (dropdownMenu.length != 0) 
                {
                    $('body').append(dropdownMenu.css({
                        position: 'absolute',
                        left: dropdown.offset().left,
                        top: dropdown.offset().top
                    }).detach());
                }
            });
        }

        function InitializeCardSearch()
        {
            var cache = {};

            $(document).on('focus', '.card-search', function () {
                var input = $(this);
                var hiddenInput = input.next("input[type='hidden']");

                input.autocomplete({
                    minLength: 2,
                    source: function (request, response) {
                        var term = request.term;
                        if (term in cache) {
                            response(cache[term]);
                            return;
                        }

                        $.getJSON("/Game/Home/SearchCards", { searchString: term }, function (data, status, xhr) {
                            cache[term] = data;
                            response(data);
                        });
                    },
                    focus: function (event, ui) {
                        input.val(ui.item.label);
                        return false;
                    },
                    select: function (event, ui) {
                        input.val(ui.item.label);
                        hiddenInput.val(ui.item.value).trigger('change');
                        return false;
                    },
                    appendTo: input.parent()
                });

                input.on('input', function () {
                    if (input.val().trim() === '') {
                        hiddenInput.val('').trigger('change');
                    }
                });
            });
        }

        //UI Event Handlers
        function commanderId_Changed()
        {
            var input = $(this);
            var cardId = input.val();
            var slot = input.data('slot');
            var playerId = input.closest('.commander-inputs').data('player-id');

            //Update state when user selects a commander
            $.ajax({
                url: '/Game/Home/UpdateCommander',
                data: {
                    gameId: '@(Model.GameId)',
                    playerId: playerId,
                    slot: slot,
                    cardId: cardId
                },
                success: function (result) {
                    RefreshCommanders(result, playerId);
                }
            });
        }

        function cardSearchId_Changed()
        {
            var input = $(this);
            var cardId = input.val();

            $.ajax({
                url: '/Game/Home/AddCardToCardHistory',
                data: {
                    gameId: '@(Model.GameId)',
                    playerId: '@(Model.PlayerId)',
                    cardId: cardId
                },
                success: function (result) {
                    $('.gamePanel').html(result);
                }
            });
        }

        async function btnPassTurn_Click()
        {
            var button = $(this);
            button.prop('disabled', true);

            $.ajax({
                url: '/Game/Home/PassTurn',
                data: {
                    gameId: '@(Model.GameId)'
                },
                complete: function () {
                    button.prop('disabled', false);
                }
            });
        }

        function btnAdjustLifeTotal_Click()
        {
            var button = $(this);
            button.prop('disabled', true);

            var playerId = button.data('player-id');
            var amount = parseFloat(button.data('amount'));
            var lifeTotalElement = button.siblings('.lifeTotal');
            var newLifeTotal = parseFloat(lifeTotalElement.text()) + amount;
            
            $.ajax({
                url: '/Game/Home/AdjustLifeTotal',
                data: {
                    gameId: '@(Model.GameId)',
                    playerId: playerId,
                    amount: amount
                },
                complete: function () {
                    button.prop('disabled', false);
                }
            });
        }

        function btnAdjustInfectCount_Click() {
            var button = $(this);
            button.prop('disabled', true);

            var playerId = button.data('player-id');
            var amount = parseFloat(button.data('amount'));
            var infectCountElement = button.parent().find('.infectCount').first();
            var newCount = parseFloat(infectCountElement.text()) + amount;

            if(newCount >= 0)
            {
                $.ajax({
                    url: '/Game/Home/AdjustInfectCount',
                    data: {
                        gameId: '@(Model.GameId)',
                        playerId: playerId,
                        amount: amount
                    },
                    success: function () {
                        UpdateInfectCount(playerId, amount);
                    },
                    complete: function () {
                        button.prop('disabled', false);
                    }
                });
            }
            else
            {
                button.prop('disabled', false);
            }
        }

        function btnAdjustCommanderDamage_Click()
        {
            var button = $(this);
            button.prop('disabled', true);

            var playerId = button.data('player-id');
            var ownerPlayerId = button.data('owner-player-id');
            var cardId = button.data('card-id');
            var amount = parseFloat(button.data('amount'));
            var damageCountElement = button.parent().find('.damageCount').first();

            if (parseFloat(damageCountElement.text()) + amount >= 0) {
                var tracker = $(this).closest('.commanderDamageTracker');
                var progressBar = tracker.find('.progress-bar').first();

                $.ajax({
                    url: '/Game/Home/AdjustCommanderDamage',
                    data: {
                        gameId: '@(Model.GameId)',
                        playerId: playerId,
                        ownerPlayerId: ownerPlayerId,
                        cardId: cardId,
                        amount: amount
                    },
                    success: function () {
                        UpdateCommanderDamage(playerId, ownerPlayerId, cardId, amount);
                    },
                    complete: function () {
                        button.prop('disabled', false);
                    }
                });
            }
            else
            {
                button.prop('disabled', false);
            }
        }

        function btnPromoteToGameOwner_Click()
        {
            var button = $(this);
            var playerId = button.data('player-id');

            $.ajax({
                url: '/Game/Home/PromoteToGameOwner',
                data: {
                    gameId: '@(Model.GameId)',
                    playerId: playerId
                }
            });
        }

        function playerThumbnail_Click() {
            var playerThumbnail = $(this);

            //Set the main video to the clicked player
            var playerVideo = playerThumbnail.find('.playerVideo')[0];
            var playerListPlayer = $(playerVideo).closest('.playerListPlayer');
            var focusedPlayerId = $(playerListPlayer).data('player-id');

            var stream = playerVideo.srcObject;
            var focusedPlayerVideo = $('#focusedPlayerVideo')[0];
            focusedPlayerVideo.srcObject = stream;
            focusedPlayerVideo.play();

            //Set the focused player style on the clicked player
            $('.playerListPlayer').not(playerListPlayer).removeClass('focusedPlayer');
            $(playerListPlayer).addClass('focusedPlayer');

            var newFocusedPlayerIndicator = $(playerListPlayer).find(".focusedPlayerIndicator").first();
            $('.focusedPlayerIndicator').not(newFocusedPlayerIndicator).hide();
            $(newFocusedPlayerIndicator).show();

            //Tell the server to save the focused player state
            $.ajax({
                url: '/Game/Home/UpdateFocusedPlayer',
                data: {
                    playerId: @Model.PlayerId,
                    focusedPlayerId: focusedPlayerId
                }
            });

            var playerInfoFromThumbnail = playerListPlayer.find('.playerInfo');
            var focusedPlayerInfo = $('#focusedPlayer').find('.playerInfo');
            focusedPlayerInfo.html(playerInfoFromThumbnail.html());
        }

        function btnRemoveCard_Click()
        {
            var button = $(this);
            button.prop('disabled', false);
            var id = button.data('id');

            $.ajax({
                url: '/Game/Home/RemoveCardFromCardHistory',
                data: {
                    id: id
                },
                success: function ()
                {
                    button.closest('.card-history-item').remove();
                },
                complete: function () 
                {
                    button.prop('disabled', false);
                }
            });
        }

        //Methods
        function OnPlayerStreamStarted(e){
            var remoteVideoElement = $('.remoteVideo[data-player-id=' + e.playerId + ']')[0];
            remoteVideoElement.srcObject = e.stream;
            remoteVideoElement.addEventListener('loadedmetadata', () => {
                remoteVideoElement.play();
                HideErrorThumbnail(e.playerId);
            });
        }

        function OnPlayerStreamEnded(e){
            console.log('stream ended');
        }

        function RemovePlayer(playerId)
        {
            var playerListPlayer = $('.playerListPlayer[data-player-id=' + playerId + ']');

            if (playerListPlayer.hasClass('focusedPlayer')) {
                var focusedPlayerVideo = $('#focusedPlayerVideo')[0];
                focusedPlayerVideo.pause();
                focusedPlayerVideo.srcObject = null;
            }
            
            playerListPlayer.remove();
        }

        async function LoadRemoteStreams() 
        {
            var remoteVideos = $(".remoteVideo");

            for (let i = 0; i < remoteVideos.length; i++) {
                var peerId = $(remoteVideos[i]).attr("data-peerid");
                var playerId = $(remoteVideos[i]).attr("data-player-id");

                await LoadRemoteStream(peerId, playerId);
            }
        }

        async function LoadRemoteStream(peerId, playerId) 
        {
            _playerManager.Call(peerId, playerId);
        }

        function HideErrorThumbnail(playerId) 
        {
            var playerListPlayer = $('.playerListPlayer[data-player-id=' + playerId + ']');

            const videoElement = playerListPlayer.find('.playerVideo');
            videoElement.show();

            const errorImageElement = playerListPlayer.find('.errorImage');
            errorImageElement.hide();
        }

        function RefreshPlayersList() 
        {
            $.ajax({
                url: '/Game/Home/PlayerBoard/@Model.GameId',
                data: {
                    gameId: '@Model.GameId'
                },
                success: async function (html) {
                    $('#playerBoardContainer').html(html);

                    await RefreshStreams();
                    InitializeFocusedPlayer();
                }
            });
        }

        async function RefreshStreams() 
        {
            try
            {
                await InitializeLocalVideoStream();
            }
            catch(error)
            {
                console.warn('Problem loading local video stream:' + error);
            }

            try 
            {
                await LoadRemoteStreams();
            }
            catch (error) 
            {
                console.warn('Problem loading remote video streams:' + error);
            }
        }

        function RefreshCommanders(result, playerId)
        {
            //Update the commander info for the player
            var commanderInfo = $('.commanderInfo[data-player-id=' + playerId + ']');
            commanderInfo.each(function () {
                commanderInfo.html(result.commanderInfo);
            });

            //Update commander damage trackers for all players
            for (var key in result.commanderDamages) {
                if (result.commanderDamages.hasOwnProperty(key)) {
                    var commanderDamagesHtml = result.commanderDamages[key];
                    $('.commanderDamages[data-player-id="' + key + '"]').html(commanderDamagesHtml);
                }
            }
        }

        function ChangeProgress(progressBar, amount) {
            var minValue = parseFloat(progressBar.attr('aria-valuemin'));
            var maxValue = parseFloat(progressBar.attr('aria-valuemax'));
            var currentValue = parseFloat(progressBar.data('value'));
            var newValue = currentValue + amount;

            var percentage = ((newValue - minValue) / (maxValue - minValue)) * 100;
            progressBar.css('width', percentage + '%');
            progressBar.attr('aria-valuenow', percentage);
            progressBar.data('value', newValue);
        }

        function InitializePlayerTurnOrderDialog()
        {
            $(".playerTurnOrder").sortable({
                axis: "y",
                update: function (event, ui) {
                    UpdatePlayerTurnOrderValues();
                }
            });
        }

        function UpdatePlayerTurnOrderValues()
        {
            $(".playerTurnOrder li").each(function (index) {
                var inputIndex = $(this).find('input[name="Players.Index"]');
                var inputId = $(this).find('input[name^="Players["][name$="].Id"]');
                var inputPlayerName = $(this).find('input[name^="Players["][name$="].PlayerName"]');

                inputIndex.val(index);
                inputId.attr('name', 'Players[' + index + '].Id');
                inputPlayerName.attr('name', 'Players[' + index + '].PlayerName');
            });
        }

        function UpdateCommanderDamage(playerId, ownerPlayerId, cardId, amount)
        {
            $('.damageCount[data-player-id=' + playerId + '][data-owner-player-id=' + ownerPlayerId + '][data-card-id=' + cardId + ']').each(function () {
                var newCount = parseFloat($(this).text()) + amount;
                $(this).text(newCount);

                var tracker = $(this).closest('.commanderDamageTracker');
                var progressBar = tracker.find('.progress-bar').first();
                ChangeProgress(progressBar, amount);
            });
        }

        function UpdateInfectCount(playerId, amount)
        {
            $('.infectCount[data-player-id=' + playerId + ']').each(function () {
                var newCount = parseFloat($(this).text()) + amount;
                $(this).text(newCount);

                var tracker = $(this).closest('.infectTracker');
                var progressBar = tracker.find('.progress-bar').first();
                ChangeProgress(progressBar, amount);
            });
        }
    </script>
}