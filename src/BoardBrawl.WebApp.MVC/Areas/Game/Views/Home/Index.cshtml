@using BoardBrawl.WebApp.MVC.Areas.Game.Models;
@model Model;

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>

@{
    ViewData["Title"] = Model.GameName;
}
<style>
    .card-tooltip-image {
        width: 250px;
    }

    .tooltip-inner {
        max-width: 100% !important;
    }

    .no-arrow::after {
        display: none !important;
    }
</style>

<div class="row bg-dark text-white" style="height:100%;" id="main">
    <div class="col-1 h-100" style="overflow-y:auto; overflow-x:clip; min-width: 94px; max-width: 94px;">
        @await Html.PartialAsync("_CommandBar", Model.PlayerBoard)
    </div>

    <div class="col h-100">
        <div id="playerBoardContainer" class="row h-100 border border-primary">
            @await Html.PartialAsync("_PlayerBoard", Model.PlayerBoard)
        </div>
    </div>

    <div class="col-2 h-100" style="overflow-y:auto; overflow-x:clip;">
        @await Html.PartialAsync("_GameHistoryPanel", null)
    </div>
</div>

@section Scripts
{
    <script>
        //Fields
        var _peerJsObject;
        var _peerJsConnectionId;
        var _gameHubConnection;

        //Initialization
        $(document).ready(function () 
        {
            InitializeGameHubConnection();
            InitializeUiEventHandlers();
            InitializeTooltipsForCards();
            InitializePlayerInfoDropdowns();
            InitializeCommanderInputs();

            _peerJsObject = new Peer();
            _peerJsObject.on('open', id => {
                OnPeerJsOpen(id);
            });
        });

        $(document).ajaxComplete(function () {
            //Re-initialize tooltips after any part of the board is reloaded
            InitializeTooltipsForCards();
        });

        async function OnPeerJsOpen(peerJsConnectionId) 
        {
            _peerJsConnectionId = peerJsConnectionId;

            await JoinGameHub();

            _peerJsObject.on("call", (call) => {
                AnswerCall(call);
            });

            PlayerBoard_LoadRemoteStreams(_peerJsObject);
        }

        function InitializeGameHubConnection() 
        {
            _gameHubConnection = new signalR.HubConnectionBuilder()
                .withUrl("/GameHub").build();

            _gameHubConnection.on("OnPlayerJoined", function (playerId, peerId) {
                OnPlayerJoinedGame(playerId, peerId);
            });

            _gameHubConnection.on("OnPlayerLifeTotalChanged", function (playerId) {
                OnPlayerLifeTotalChanged(playerId);
            });

            _gameHubConnection.on("OnPassTurn", function () {
                OnPassTurn();
            });
        }

        async function JoinGameHub()
        {
            await _gameHubConnection.start();
            await _gameHubConnection.invoke("JoinGameHub", '@Model.GameId', '@Model.PlayerId', _peerJsConnectionId);
        }

        //Game hub events
        function OnPlayerJoinedGame(playerId, peerId) 
        {
            RefreshPlayersList();
        }

        function OnPassTurn()
        {
            $.ajax({
                url: '/Game/Home/PlayerBoard/@Model.GameId',
                data: {
                    gameId: '@Model.GameId'
                },
                success: function (html) {
                    $('#playerBoardContainer').html(html);
                    PlayerBoard_LoadRemoteStreams(_peerJsObject);
                }
            });
        }

        function OnPlayerLifeTotalChanged(playerId)
        {
            
        }

        //Methods
        function RefreshPlayersList() 
        {
            $.ajax({
                url: '/Game/Home/PlayerBoard/@Model.GameId',
                data:{
                    gameId : '@Model.GameId'
                },
                success: function (html) {
                    $('#playerBoardContainer').html(html);
                    PlayerBoard_LoadRemoteStreams(_peerJsObject);
                }
            });
        }

        function AnswerCall(call) 
        {
            call.answer(_localVideoStream);
        }

        function InitializeUiEventHandlers()
        {
            $(document).on('click', '#btnPassTurn', btnPassTurn_Click);

            $(document).on('click', '.btnAdjustLifeTotal', btnAdjustLifeTotal_Click);

            $(document).on("click", '.btnAdjustInfectCount', btnAdjustInfectCount_Click);

            $(document).on('click', '.btnAdjustCommanderDamage', btnAdjustCommanderDamage_Click);

            $(document).on('click', '#btnPlayerTurnOrder', btnPlayerTurnOrder_Click);

            $(document).on('click', '.btnClosePlayerTurnOderDialog', btnClosePlayerTurnOrderDialog_Click);
        }

        function InitializeTooltipsForCards()
        {
            $('.card-tooltip[data-toggle="tooltip"]').tooltip({
                animated: 'fade',
                placement: 'auto',
                html: true
            });
        }

        function InitializePlayerInfoDropdowns()
        {
            //Make sure the player info drop down can extend outside of the parent container
            $(document).on('show.bs.dropdown', '.playerInfoDropdown', function () {
                var dropdown = $(this).closest('.dropdown');
                var dropdownMenu = dropdown.find('.dropdown-menu').first();

                if (dropdownMenu.length != 0) 
                {
                    $('body').append(dropdownMenu.css({
                        position: 'absolute',
                        left: dropdown.offset().left,
                        top: dropdown.offset().top
                    }).detach());
                }
            });
        }

        function InitializeCommanderInputs()
        {
            //Auto complete for commander inputs
            var cache = {};

            $(document).on('focus', '.commander-search', function () {
                var input = $(this);
                var hiddenInput = input.next("input[type='hidden']");

                input.autocomplete({
                    minLength: 2,
                    source: function (request, response) {
                        var term = request.term;
                        if (term in cache) {
                            response(cache[term]);
                            return;
                        }

                        $.getJSON("/Game/Home/SearchCards", { searchString: term }, function (data, status, xhr) {
                            cache[term] = data;
                            response(data);
                        });
                    },
                    focus: function (event, ui) {
                        input.val(ui.item.label);
                        return false;
                    },
                    select: function (event, ui) {
                        input.val(ui.item.label);
                        hiddenInput.val(ui.item.value).trigger('change');
                        return false;
                    },
                    appendTo: input.closest('.commander-inputs')
                });

                input.on('input', function () {
                    if (input.val().trim() === '') {
                        hiddenInput.val('').trigger('change');
                    }
                });
            });

            //When a player changes their commander, update the server
            $('body').on('change', '.commander-id', function () {
                var input = $(this);
                var cardId = input.val();
                var slot = input.data('slot');
                var playerId = input.closest('.commander-inputs').data('player-id');
     
                //Update state when user selects a commander
                $.ajax({
                    url: '/Game/Home/UpdateCommander',
                    data: {
                        gameId: '@(Model.GameId)',
                        playerId: playerId,
                        slot: slot,
                        cardId: cardId
                    },
                    success: function (result) 
                    {
                        //Update the commander info for the player
                        var commanderInfoContainer = $('#commanderInfo' + playerId);
                        commanderInfoContainer.html(result.commanderInfo);

                        //Update commander damage trackers for all players
                        for (var key in result.commanderDamages) {
                            if (result.commanderDamages.hasOwnProperty(key)) {
                                var commanderDamagesHtml = result.commanderDamages[key];
                                $('.commanderDamages[data-player-id="' + key + '"]').html(commanderDamagesHtml);
                            }
                        }
                    }
                });
            });
        }

        async function btnPassTurn_Click()
        {
            await _gameHubConnection.invoke("PassTurn", '@Model.GameId');
        }

        function btnAdjustLifeTotal_Click()
        {
            var button = $(this);
            button.prop('disabled', true);

            var playerId = button.data('player-id');
            var amount = parseFloat(button.data('amount'));
            var lifeTotalElement = button.siblings('.lifeTotal');
            var newLifeTotal = parseFloat(lifeTotalElement.text()) + amount;
            
            $.ajax({
                url: '/Game/Home/AdjustLifeTotal',
                data: {
                    gameId: '@(Model.GameId)',
                    playerId: playerId,
                    amount: amount
                },
                success: function () {
                    lifeTotalElement.text(newLifeTotal);
                },
                complete: function () {
                    button.prop('disabled', false);
                }
            });
        }

        function btnAdjustInfectCount_Click() {
            var button = $(this);
            button.prop('disabled', true);

            var playerId = button.data('player-id');
            var amount = parseFloat(button.data('amount'));
            var infectCountElement = button.parent().find('.infectCount').first();
            var newCount = parseFloat(infectCountElement.text()) + amount;

            if(newCount >= 0)
            {
                var tracker = $(this).closest('.infectTracker');
                var progressBar = tracker.find('.progress-bar').first();

                $.ajax({
                    url: '/Game/Home/AdjustInfectCount',
                    data: {
                        gameId: '@(Model.GameId)',
                        playerId: playerId,
                        amount: amount
                    },
                    success: function () {
                        infectCountElement.text(newCount);
                        ChangeProgress(progressBar, amount);
                    },
                    complete: function () {
                        button.prop('disabled', false);
                    }
                });
            }
            else
            {
                button.prop('disabled', false);
            }
        }

        function btnAdjustCommanderDamage_Click()
        {
            var button = $(this);
            button.prop('disabled', true);

            var playerId = button.data('player-id');
            var ownerPlayerId = button.data('owner-player-id');
            var cardId = button.data('card-id');
            var amount = parseFloat(button.data('amount'));
            var damageCountElement = button.parent().find('.damageCount').first();
            var newCount = parseFloat(damageCountElement.text()) + amount;

            if (newCount >= 0) {
                var tracker = $(this).closest('.commanderDamageTracker');
                var progressBar = tracker.find('.progress-bar').first();

                $.ajax({
                    url: '/Game/Home/AdjustCommanderDamage',
                    data: {
                        gameId: '@(Model.GameId)',
                        playerId: playerId,
                        ownerPlayerId: ownerPlayerId,
                        cardId: cardId,
                        amount: amount
                    },
                    success: function () {
                        damageCountElement.text(newCount);
                        ChangeProgress(progressBar, amount);
                    },
                    complete: function () {
                        button.prop('disabled', false);
                    }
                });
            }
            else
            {
                button.prop('disabled', false);
            }
        }

        function ChangeProgress(progressBar, amount) {
            var minValue = parseFloat(progressBar.attr('aria-valuemin'));
            var maxValue = parseFloat(progressBar.attr('aria-valuemax'));
            var currentValue = parseFloat(progressBar.data('value'));
            var newValue = currentValue + amount;

            var percentage = ((newValue - minValue) / (maxValue - minValue)) * 100;
            progressBar.css('width', percentage + '%');
            progressBar.attr('aria-valuenow', percentage);
            progressBar.data('value', newValue);
        }

        function btnPlayerTurnOrder_Click()
        {
            var playerTurnOrderDialog = $('#playerTurnOrderDialog');

            playerTurnOrderDialog[0].showModal();
        }

        function btnClosePlayerTurnOrderDialog_Click()
        {
            var playerTurnOrderDialog = $('#playerTurnOrderDialog');

            playerTurnOrderDialog[0].close();
        }
    </script>
}