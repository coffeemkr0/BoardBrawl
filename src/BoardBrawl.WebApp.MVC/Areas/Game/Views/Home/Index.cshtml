@using BoardBrawl.WebApp.MVC.Areas.Game.Models;
@model Model;

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>

@{
    ViewData["Title"] = Model.GameName;
}
<style>
    .card-tooltip-image {
        width: 250px;
    }

    .tooltip-inner {
        max-width: 100% !important;
    }

    .no-arrow::after {
        display: none !important;
    }

    .btn-group-xs > .btn, .btn-xs {
        padding: .25rem .4rem;
        font-size: .875rem;
        line-height: .5;
        border-radius: .2rem;
    }

    .btn-hover-danger:hover {
        border-color: #a52834 !important;
        background-color: #b02a37 !important;
    }

    .btn-hover-warning:hover {
        background-color: #ffcd39 !important;
        border-color: #ffc720 !important;
    }

    .text-md {
        font-size: .8rem;
    }

    .text-sm {
        font-size: .7rem;
    }

    .text-xs {
        font-size: .6rem;
    }

    .overlay-top {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 1;
        background-color: rgba(33, 37, 41, 0.5)
    }
</style>

<div class="row bg-dark" style="height:100%;" id="main">
    <div class="col-1 h-100" style="overflow-y:auto; overflow-x:clip; min-width: 94px; max-width: 94px;">
        @await Html.PartialAsync("_CommandBar")
    </div>

    <div class="col h-100">
        <div id="playerBoardContainer" class="row h-100 border border-primary">
            @await Html.PartialAsync("_PlayerBoard", Model.PlayerBoard)
        </div>
    </div>

    <div class="col-2 h-100 gamePanel" style="overflow-y:auto; overflow-x:clip;">
        @await Html.PartialAsync("_GamePanel")
    </div>
</div>

@section Scripts
{
    <script>
        //Fields
        var _localVideoStream;
        var _peerJsObject;
        var _peerJsConnectionId;
        var _gameHubConnection;

        //Initialization
        $(document).ready(function () 
        {
            InitializeGameHub();
            InitializeCardSearch();
            InitializeUiEventHandlers();
            InitializeTooltips();
            InitializePlayerInfoDropdowns();
            InitializePlayerTurnOrderDialog();

            InitializeAsync();
        });

        async function InitializeAsync()
        {
            await InitializeLocalVideoStream();

            _peerJsConnectionId = await new Promise((resolve, reject) => {
                _peerJsObject = new Peer();

                _peerJsObject.on('open', id => {
                    resolve(id);
                });

                _peerJsObject.on('error', error => {
                    reject(error);
                });
            });

            await JoinGameHub();

            _peerJsObject.on("call", (call) => {
                AnswerCall(call);
            });

            //TODO:await this before initializing the focused player
            LoadRemoteStreams(_peerJsObject);

            InitializeFocusedPlayer();
        }

        $(document).ajaxComplete(function () {
            //Re-initialize tooltips after any part of the board is reloaded
            InitializeTooltips();
        });

        function InitializeGameHub() 
        {
            _gameHubConnection = new signalR.HubConnectionBuilder()
                .withUrl("/GameHub").build();

            _gameHubConnection.on("OnPlayerJoined", function (playerId, peerId) {
                OnPlayerJoinedGame(playerId, peerId);
            });

            _gameHubConnection.on("OnPlayerLifeTotalChanged", function (playerId) {
                OnPlayerLifeTotalChanged(playerId);
            });

            _gameHubConnection.on("OnPassTurn", function () {
                OnPassTurn();
            });

            _gameHubConnection.on("OnGameOwnerChanged", function (redirectUrl) {
                OnGameOwnerChanged(redirectUrl);
            });

            _gameHubConnection.on("OnPlayerLeftGame", function (playerId) {
                OnPlayerLeftGame(playerId);
            });
        }

        async function JoinGameHub()
        {
            await _gameHubConnection.start();
            await _gameHubConnection.invoke("JoinGameHub", '@Model.GameId', '@Model.PlayerId', _peerJsConnectionId);
        }

        //Game hub events
        function OnPlayerJoinedGame(playerId, peerId) 
        {
            if(playerId != '@Model.PlayerId')
            {
                RefreshPlayersList();
            }
        }

        function OnPassTurn()
        {
            $.ajax({
                url: '/Game/Home/PlayerBoard/@Model.GameId',
                data: {
                    gameId: '@Model.GameId'
                },
                success: function (html) {
                    $('#playerBoardContainer').html(html);
                    LoadRemoteStreams(_peerJsObject);
                }
            });
        }

        function OnPlayerLifeTotalChanged(playerId)
        {
            
        }

        function OnGameOwnerChanged(redirectUrl)
        {
            window.location.href = redirectUrl;
        }

        function OnPlayerLeftGame(playerId)
        {
            if (playerId != '@Model.PlayerId') {
                RefreshPlayersList();
            }
        }

        //Methods
        function RefreshPlayersList() 
        {
            $.ajax({
                url: '/Game/Home/PlayerBoard/@Model.GameId',
                data:{
                    gameId : '@Model.GameId'
                },
                success: function (html) {
                    $('#playerBoardContainer').html(html);
                    LoadRemoteStreams(_peerJsObject);
                }
            });
        }

        async function InitializeLocalVideoStream() {
            var videoElement = $(".localVideo")[0];

            try 
            {
                const stream = await navigator.mediaDevices.getUserMedia({
                    audio: true,
                    video: true
                });

                _localVideoStream = stream;

                videoElement.srcObject = stream;
                await videoElement.play();
            } catch (error) {
                if (videoElement) videoElement.style.display = "none";
                var errorImageElement = $('.errorImage[data-player-id="@Model.PlayerId"]')[0];
                errorImageElement.style.display = "block";
            }
        }

        function InitializeFocusedPlayer() 
        {
            var focusedPlayerThumbnail = $('.focusedPlayer');

            if(focusedPlayerThumbnail)
            {
                focusedPlayerThumbnail.find('.playerThumbnail').trigger('click');
            }
        }

        function LoadRemoteStreams(peer) 
        {
            $(".remoteVideo").each(function () {
                var peerId = $(this).attr("data-peerid");
            
                var call = peer.call(peerId, _localVideoStream);

                if(!call){
                    var videoElement = $('.playerVideo[data-peerid="' + peerId + '"]')[0];
                    videoElement.style.display = "none";

                    var errorImageElement = $('.errorImage[data-peerid="' + peerId +'"]')[0];
                    errorImageElement.style.display = "block";
                }
                else{
                    call.on("stream", (stream) => {
                        this.srcObject = stream;
                        this.addEventListener('loadedmetadata', () => {
                            this.play();
                        });
                    });

                    call.on("error", (err) => {
                        console.log("Call error:" + err);
                    });

                    call.on('close', () => {
                        Endcall(call);
                    })
                }
            });
        }

        function EndCall(call) {
            call.close();
        }

        function AnswerCall(call) 
        {
            call.answer(_localVideoStream);
        }

        function InitializeUiEventHandlers()
        {
            $(document).on('click', '#btnPassTurn', btnPassTurn_Click);

            $(document).on('click', '.btnAdjustLifeTotal', btnAdjustLifeTotal_Click);

            $(document).on("click", '.btnAdjustInfectCount', btnAdjustInfectCount_Click);

            $(document).on('click', '.btnAdjustCommanderDamage', btnAdjustCommanderDamage_Click);

            $(document).on('click', '.btnPromoteToGameOwner', btnPromoteToGameOwner_Click);

            $(document).on('click', '.playerThumbnail', playerThumbnail_Click);

            $('body').on('change', '.commander-id', commanderId_Changed);

            $('body').on('change', '.card-search-id', cardSearchId_Changed);
        }

        function InitializeTooltips()
        {
            //Tooltips for card images
            $('.card-tooltip').tooltip({
                animated: 'fade',
                placement: 'auto',
                html: true
            });

            //All other tooltips
            $('[data-bs-toggle="tooltip"]').each(function () {
                $(this).tooltip();
            });
        }

        function InitializePlayerInfoDropdowns()
        {
            //Make sure the player info drop down can extend outside of the parent container
            $(document).on('show.bs.dropdown', '.playerInfoDropdown', function () {
                var dropdown = $(this).closest('.dropdown');
                var dropdownMenu = dropdown.find('.dropdown-menu').first();

                if (dropdownMenu.length != 0) 
                {
                    $('body').append(dropdownMenu.css({
                        position: 'absolute',
                        left: dropdown.offset().left,
                        top: dropdown.offset().top
                    }).detach());
                }
            });
        }

        function InitializeCardSearch()
        {
            var cache = {};

            $(document).on('focus', '.card-search', function () {
                var input = $(this);
                var hiddenInput = input.next("input[type='hidden']");

                input.autocomplete({
                    minLength: 2,
                    source: function (request, response) {
                        var term = request.term;
                        if (term in cache) {
                            response(cache[term]);
                            return;
                        }

                        $.getJSON("/Game/Home/SearchCards", { searchString: term }, function (data, status, xhr) {
                            cache[term] = data;
                            response(data);
                        });
                    },
                    focus: function (event, ui) {
                        input.val(ui.item.label);
                        return false;
                    },
                    select: function (event, ui) {
                        input.val(ui.item.label);
                        hiddenInput.val(ui.item.value).trigger('change');
                        return false;
                    },
                    appendTo: input.parent()
                });

                input.on('input', function () {
                    if (input.val().trim() === '') {
                        hiddenInput.val('').trigger('change');
                    }
                });
            });
        }

        function commanderId_Changed()
        {
            var input = $(this);
            var cardId = input.val();
            var slot = input.data('slot');
            var playerId = input.closest('.commander-inputs').data('player-id');

            //Update state when user selects a commander
            $.ajax({
                url: '/Game/Home/UpdateCommander',
                data: {
                    gameId: '@(Model.GameId)',
                    playerId: playerId,
                    slot: slot,
                    cardId: cardId
                },
                success: function (result) {
                    //Update the commander info for the player
                    var commanderInfo = $('.commanderInfo[data-player-id=' + playerId + ']');
                    commanderInfo.each(function () {
                        commanderInfo.html(result.commanderInfo);
                    });

                    //Update commander damage trackers for all players
                    for (var key in result.commanderDamages) {
                        if (result.commanderDamages.hasOwnProperty(key)) {
                            var commanderDamagesHtml = result.commanderDamages[key];
                            $('.commanderDamages[data-player-id="' + key + '"]').html(commanderDamagesHtml);
                        }
                    }
                }
            });
        }

        function cardSearchId_Changed()
        {
            var input = $(this);
            var cardId = input.val();

            $.ajax({
                url: '/Game/Home/AddCardToCardHistory',
                data: {
                    gameId: '@(Model.GameId)',
                    playerId: '@(Model.PlayerId)',
                    cardId: cardId
                },
                success: function (result) {
                    $('.gamePanel').html(result);
                }
            });
        }

        async function btnPassTurn_Click()
        {
            await _gameHubConnection.invoke("PassTurn", '@Model.GameId');
        }

        function btnAdjustLifeTotal_Click()
        {
            var button = $(this);
            button.prop('disabled', true);

            var playerId = button.data('player-id');
            var amount = parseFloat(button.data('amount'));
            var lifeTotalElement = button.siblings('.lifeTotal');
            var newLifeTotal = parseFloat(lifeTotalElement.text()) + amount;
            
            $.ajax({
                url: '/Game/Home/AdjustLifeTotal',
                data: {
                    gameId: '@(Model.GameId)',
                    playerId: playerId,
                    amount: amount
                },
                success: function () {
                    $('.lifeTotal[data-player-id=' + playerId + ']').each(function()
                    {
                        $(this).text(newLifeTotal);
                    });
                },
                complete: function () {
                    button.prop('disabled', false);
                }
            });
        }

        function btnAdjustInfectCount_Click() {
            var button = $(this);
            button.prop('disabled', true);

            var playerId = button.data('player-id');
            var amount = parseFloat(button.data('amount'));
            var infectCountElement = button.parent().find('.infectCount').first();
            var newCount = parseFloat(infectCountElement.text()) + amount;

            if(newCount >= 0)
            {
                $.ajax({
                    url: '/Game/Home/AdjustInfectCount',
                    data: {
                        gameId: '@(Model.GameId)',
                        playerId: playerId,
                        amount: amount
                    },
                    success: function () {
                        $('.infectCount[data-player-id=' + playerId + ']').each(function () {
                            $(this).text(newCount);

                            var tracker = $(this).closest('.infectTracker');
                            var progressBar = tracker.find('.progress-bar').first();
                            ChangeProgress(progressBar, amount);
                        });
                    },
                    complete: function () {
                        button.prop('disabled', false);
                    }
                });
            }
            else
            {
                button.prop('disabled', false);
            }
        }

        function btnAdjustCommanderDamage_Click()
        {
            var button = $(this);
            button.prop('disabled', true);

            var playerId = button.data('player-id');
            var ownerPlayerId = button.data('owner-player-id');
            var cardId = button.data('card-id');
            var amount = parseFloat(button.data('amount'));
            var damageCountElement = button.parent().find('.damageCount').first();
            var newCount = parseFloat(damageCountElement.text()) + amount;

            if (newCount >= 0) {
                var tracker = $(this).closest('.commanderDamageTracker');
                var progressBar = tracker.find('.progress-bar').first();

                $.ajax({
                    url: '/Game/Home/AdjustCommanderDamage',
                    data: {
                        gameId: '@(Model.GameId)',
                        playerId: playerId,
                        ownerPlayerId: ownerPlayerId,
                        cardId: cardId,
                        amount: amount
                    },
                    success: function () {
                        $('.damageCount[data-player-id=' + playerId + '][data-owner-player-id=' + ownerPlayerId + '][data-card-id=' + cardId + ']').each(function () {
                            $(this).text(newCount);

                            var tracker = $(this).closest('.commanderDamageTracker');
                            var progressBar = tracker.find('.progress-bar').first();
                            ChangeProgress(progressBar, amount);
                        });
                    },
                    complete: function () {
                        button.prop('disabled', false);
                    }
                });
            }
            else
            {
                button.prop('disabled', false);
            }
        }

        function btnPromoteToGameOwner_Click()
        {
            var button = $(this);
            var playerId = button.data('player-id');

            $.ajax({
                url: '/Game/Home/PromoteToGameOwner',
                data: {
                    gameId: '@(Model.GameId)',
                    playerId: playerId
                }
            });
        }

        function playerThumbnail_Click() {
            var playerThumbnail = $(this);

            //Set the main video to the clicked player
            var playerVideo = playerThumbnail.find('.playerVideo')[0];
            var playerListPlayer = $(playerVideo).closest('.playerListPlayer');
            var focusedPlayerId = $(playerListPlayer).data('player-id');

            var stream = playerVideo.srcObject;
            var focusedPlayerVideo = $('#focusedPlayerVideo')[0];
            focusedPlayerVideo.srcObject = stream;
            focusedPlayerVideo.play();

            //Set the focused player style on the clicked player
            $('.playerListPlayer').not(playerListPlayer).removeClass('focusedPlayer');
            $(playerListPlayer).addClass('focusedPlayer');

            var newFocusedPlayerIndicator = $(playerListPlayer).find(".focusedPlayerIndicator").first();
            $('.focusedPlayerIndicator').not(newFocusedPlayerIndicator).hide();
            $(newFocusedPlayerIndicator).show();

            //Tell the server to save the focused player state
            $.ajax({
                url: '/Game/Home/UpdateFocusedPlayer',
                data: {
                    playerId: @Model.PlayerId,
                    focusedPlayerId: focusedPlayerId
                }
            });

            var playerInfoFromThumbnail = playerListPlayer.find('.playerInfo');
            var focusedPlayerInfo = $('#focusedPlayer').find('.playerInfo');
            focusedPlayerInfo.html(playerInfoFromThumbnail.html());
        }

        function ChangeProgress(progressBar, amount) {
            var minValue = parseFloat(progressBar.attr('aria-valuemin'));
            var maxValue = parseFloat(progressBar.attr('aria-valuemax'));
            var currentValue = parseFloat(progressBar.data('value'));
            var newValue = currentValue + amount;

            var percentage = ((newValue - minValue) / (maxValue - minValue)) * 100;
            progressBar.css('width', percentage + '%');
            progressBar.attr('aria-valuenow', percentage);
            progressBar.data('value', newValue);
        }

        function InitializePlayerTurnOrderDialog()
        {
            $(".playerTurnOrder").sortable({
                axis: "y",
                update: function (event, ui) {
                    UpdatePlayerTurnOrderValues();
                }
            });
        }

        function UpdatePlayerTurnOrderValues()
        {
            $(".playerTurnOrder li").each(function (index) {
                var inputIndex = $(this).find('input[name="Players.Index"]');
                var inputId = $(this).find('input[name^="Players["][name$="].Id"]');
                var inputPlayerName = $(this).find('input[name^="Players["][name$="].PlayerName"]');

                inputIndex.val(index);
                inputId.attr('name', 'Players[' + index + '].Id');
                inputPlayerName.attr('name', 'Players[' + index + '].PlayerName');
            });
        }
    </script>
}