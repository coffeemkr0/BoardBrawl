@using SpellTable2.WebApp.MVC.Areas.Game.Models;
@model PlayerBoard

<style>
    .focusedPlayerVideoHighlight {
        outline: 2px solid yellow;
    }
</style>

<div class="row">
    <div class="col">
        @foreach (var playerInfo in Model.Players)
        {
            <div id="playerInfo@(playerInfo.UserId)">@await Component.InvokeAsync("PlayerInfo", playerInfo)</div>
            @if (playerInfo.UserId == Model.UserId)
            {
                <video class="playerVideo localVideo" muted style="width:100%"></video>
                <div class="errorImage" style="display:none"><img src="~/images/game/error-image-generic.png" /></div>
            }
            else
            {
                <video class="playerVideo remoteVideo" style="width:100%" data-userid="@playerInfo.UserId" data-peerid="@playerInfo.PeerId"></video>
            }

            <script>

                $(document).ready(function () {
                    $(document).off('click', '#btnDecreaseLife@(playerInfo.UserId)')

                    $(document).on('click', '#btnDecreaseLife@(playerInfo.UserId)', function () {
                        $.ajax({
                            url: '/Game/Home/DecreaseLifeTotal',
                            data: {
                                gameId: '@(Model.GameId)',
                                userId: '@(playerInfo.UserId)',
                                amount: 1
                            },
                            success: function (html) {
                                $('#playerInfo@(playerInfo.UserId)').html(html);
                            }
                        });
                    });

                    $(document).off('click', '#btnIncreaseLife@(playerInfo.UserId)')

                    $(document).on('click', '#btnIncreaseLife@(playerInfo.UserId)', function () {
                        $.ajax({
                            url: '/Game/Home/IncreaseLifeTotal',
                            data: {
                                gameId: '@(Model.GameId)',
                                userId: '@(playerInfo.UserId)',
                                amount: 1
                            },
                            success: function (html) {
                                $('#playerInfo@(playerInfo.UserId)').html(html);
                            }
                        });
                    });
                });
            </script>
        }
    </div>
    <div class="col-8">
        <video id="focusedPlayerVideo" style="width:100%" muted></video>
    </div>
</div>


<script>
    var _localVideoStream;

    InitializeLocalVideoStream();

    $(document).off('click', '.playerVideo');
    $(document).on('click', '.playerVideo', function () {
        OnPlayerVideoClicked(this);
    });

    function PlayerBoard_RefreshPlayerInfo(userId)
    {
        $.ajax({
            url: '/Game/Home/PlayerInfo',
            data: {
                gameId: '@(Model.GameId)',
                userId: userId
            },
            success: function (html) {
                $('#playerInfo' + userId).html(html);
            }
        });
    }

    function InitializeLocalVideoStream() 
    {
        var videoElement = $(".localVideo")[0];

        navigator.mediaDevices.getUserMedia({
            audio: true,
            video: true
        }).then(stream => {
            _localVideoStream = stream;

            videoElement.srcObject = stream;
            $(videoElement).on('loadedmetadata', function() {
                videoElement.play();
            });
        })
        .catch(error => {
            console.error('Error accessing webcam:', error);
            videoElement.style.display = "none";
            var errorImageElement = $(".errorImage")[0];
            errorImageElement.style.display = "block";
        });
    }

    function PlayerBoard_LoadRemoteStreams(peer) 
    {
        $(".remoteVideo").each(function () {
            var peerId = $(this).attr("data-peerid");
            
            var call = peer.call(peerId, _localVideoStream);

            call.on("stream", (stream) => {
                this.srcObject = stream;
                this.addEventListener('loadedmetadata', () => {
                    this.play();
                });
            });

            call.on("error", (err) => {
                console.log("Call error:" + err);
            });

            call.on('close', () => {
                Endcall(call);
            })
        });
    }

    function EndCall(call) {
        call.close();
    }

    function OnPlayerVideoClicked(videoElement) {
        var stream = videoElement.srcObject;
        var focusedPlayerVideo = $('#focusedPlayerVideo')[0];

        // Remove the highlight class from all other video elements
        $('.playerVideo').not(videoElement).removeClass('focusedPlayerVideoHighlight');

        // Add the highlight class to the clicked videoElement
        $(videoElement).addClass('focusedPlayerVideoHighlight');

        focusedPlayerVideo.srcObject = stream;
        focusedPlayerVideo.play();
    }

</script>